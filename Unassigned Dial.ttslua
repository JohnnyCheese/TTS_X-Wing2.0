menu   = require("TTS_xwing/src/Dial/Menu")
button = require("TTS_xwing/src/Dial/Button")
proxy  = require("TTS_xwing/src/Dial/Proxy")

-- ~~~~~~
-- Script by dzikakulka
-- Issues, history at: http://github.com/tjakubo2/TTS_xwing
--
-- Token for easy barrel rolls with StarViper Mk.II title
-- ~~~~~~


-- Scripted token properties
__XW_Token = false
__XW_TokenIdle = true
__XW_TokenType = 'helper:Dial'

-- Ref to assigned ship if there is one
assignedShip = nil
currMan = nil
playerColor = nil
openpanel = nil
openbutton = nil
opencolor = "#555555"
closedcolor = "#222222"

clickMode = nil
proxyMode = nil
finished_setup = true

-- Save self state
function onSave()
    if assignedShip ~= nil then
        local state = {assignedShipGUID=assignedShip.getGUID(),
                        owningPlayer=playerColor,
                        clickMode = clickMode,
                        proxyMode = proxyMode,
                    }
        return JSON.encode(state)
    end
end

faceStat = nil
firstSet=false
setSinceTemplatePlaced = false -- True if the user has set a movement since the movement template was last placed on the table
templatePlaced = false  -- True if the movement template is currently on the table (as far as we can tell based on just dial button clicks, anyway)

exOptions = {}
exOptSelected = false
exOptValue = {}
exOptButtons = { "ExOpt1", "ExOpt2", "ExOpt3", "ExOpt4", "ExOpt5",  "ExOpt6"}


-- Restore self state
function onLoad(savedData)
    --self.UI.setCustomAssets(assetTable)
    clearDial()

    if savedData ~= nil then
        state = JSON.decode(savedData)
        clickMode = state.clickMode
        proxyMode = state.proxyMode
        --savedShip = getObjectFromGUID(state.assignedShipGUID)
        --playerColor = state.owningPlayer
        --if savedShip ~= nil then
        --    assignShip(savedShip)
        --end
    end

    menu.addToggleItem("clickMode", "click mode", toggleClickMode)
    menu.addToggleItem("proxyMode", "proxy mode", toggleProxyMode)
    menu.update()
end

function clearOpenPanel()
    if openpanel ~= nil then
        self.UI.hide(openpanel)
        self.UI.setAttribute(openbutton, "color", closedcolor)
        self.UI.setAttribute(openbutton, "textColor", "#FFFFFF")
    end
    openpanel = nil
    openbutton = nil
end

function clearDial()

    self.UI.hide('TalonPanel') -- Talon has to come before CenterFU which it is inside -- hide doesn't work when the parent is already hidden (could also use active=false instead)
    self.UI.hide("ExecutionOptionsPanel")
    self.UI.hide("CenterFD")
    self.UI.hide('CenterFU')
    self.UI.hide('Setup')
    self.UI.hide("ManWin")
    self.UI.hide('arcPanel')
    self.UI.hide('relocPanel')
    self.UI.hide('tokenPanel')
    self.UI.hide("setManPeekPanel")
    winStat = false
    clearOpenPanel()
end

function onUpdate()
    if assignedShip ~= nil then
        if self.getTransformUp().y >0 then
            if faceStat ~= 'Down' then
                faceStat = 'Down'
                clearDial()
                self.UI.setAttribute("Main", "rotation", "0 0 0")
                if finished_setup then
                    self.UI.show("CenterFD")
                else
                    self.UI.show('Setup')
                end
            end
        else
            if faceStat ~= 'Up' then
                faceStat = 'Up'
                clearDial()
                manSetting()
                if finished_setup then
                    self.UI.show("CenterFU")
                else
                    self.UI.show('Setup')
                end
            end
        end

        button.setAttributeFacing("Setup", faceStat or "Down")
        button.setAttributeFacing("proxyPanel", faceStat or "Down")
    end
end

function getManouverIcons(manouver)
    if manouver:sub(1,1) == 'w' then
        manColor="White"
    elseif manouver:sub(1,1) == 'b' then
        manColor="Blue"
    elseif manouver:sub(1,1) == 'r' then
        manColor="Red"
    elseif manouver:sub(1,1) == 'p' then
        manColor="Purple"
    end

    if manouver:sub(-1,-1) == 't' then
        manType = "Talon"
    elseif manouver:sub(-1,-1) == 's' then
        if manouver:sub(2,2) == 't' then
            manType = "TurnSloop"
        else
            manType = "Sloop"
        end
    elseif manouver:sub(-1,-1) == 'z' then
        if manouver:sub(2,2) == 't' then
            manType = "TurnSlip"
        else
            manType = "BankSlip"
        end
    elseif manouver:sub(-1,-1) == 'r' then
        if manouver:sub(2,2) == 'b' then
            manType = "ReverseBank"
        else
            manType = "ReverseStraight"
        end
    elseif manouver:sub(2,2) == 't' then
        manType = "Turn"
    elseif manouver:sub(2,2) == 'b' then
        manType = "Bank"
    elseif manouver:sub(2,2) == 's' then
        manType = "Straight"
    elseif manouver:sub(2,2) == 'k' then
        manType = 'K'
    end

    local Char= manouver:find("%d")
    manSpeed = manouver:sub(Char,Char)

    if manouver:sub(3,3) == 'l' then
        manBear = "L"
    elseif manouver:sub(3,3) == 'r' then
        manBear = "R"
    else
        manBear = ""
    end
    if manSpeed=="0" and manType=="Straight" then
        manType='Stall'
    end

    return {speed = "Speed"..manSpeed, type = manColor .. manType .. manBear }
end

function manSelect(p, option, id)
    if spectReturn(p) == true or option == false then
        return
    end
    firstSet=true
    self.UI.setAttribute("ManBtnGroup","allowSwitchOff","false")
    curMan=string.lower(id)
    icons = getManouverIcons(curMan)
    speedIcon= icons.speed
    typeIcon= icons.type
    setMan = curMan:sub(2)
    befAft = '_B'
end

function manSetting()
    if setStat == true then
        self.UI.setAttribute("TypeIcon", "image", typeIcon)
        self.UI.setAttribute("SpeedIcon", "image", speedIcon)
        self.UI.setAttribute("TypeIcon", "active", "true")
        self.UI.setAttribute("SpeedIcon", "active", "true")
        self.UI.setAttribute("MoveBtn", "active", "true")
        self.UI.setAttribute("MoveBtn", "textColor", "#FFFFFF")
        self.UI.setAttribute("UndoBtn", "active", "false")
        self.UI.setAttribute("Templ", "active", "true")
        self.UI.setAttribute("Templ", "textColor", "#222222") -- Make the text same color as the background since goal is to only have the type / speed icons showing anyway
    else
        self.UI.setAttribute("TypeIcon", "active", "false")
        self.UI.setAttribute("SpeedIcon", "active", "false")
        self.UI.setAttribute("MoveBtn", "active", "false")
        self.UI.setAttribute("UndoBtn", "active", "false")
        self.UI.setAttribute("Templ", "textColor", "#FFFFFF")

        -- Hide the template button when there isn't a manuver set, since it's confusing and undefined in some cases what template should be shown then
        if not templatePlaced then
          self.UI.setAttribute("Templ", "active", "false")
        end
    end
    if firstSet== false then
        self.UI.setAttribute("TypeIcon", "active", "false")
        self.UI.setAttribute("SpeedIcon", "active", "false")
        self.UI.setAttribute("MoveBtn", "active", "false")
        self.UI.setAttribute("UndoBtn", "active", "false")
        self.UI.setAttribute("Templ", "textColor", "#FFFFFF")

        -- Hide the template button when there isn't a manuver set, since it's confusing and undefined in some cases what template should be shown then
        if not templatePlaced then
          self.UI.setAttribute("Templ", "active", "false")
        end
    end

    -- Remove template if a new manuver has been set since it was shown, since it could be confusing to still show the old template (and to show the new one you would have to click the button twice, which would be confusing)
    if setSinceTemplatePlaced and templatePlaced then
      deleteTemplate()
    end
end

function Undo(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("q")
    self.UI.setAttribute("UndoBtn", "active", "false")
    if setMan:sub(-1,-1) ~='t' or proxyMode then
        self.UI.setAttribute("MoveBtn", "active", "true")
        self.UI.setAttribute("MoveBtn", "textColor", "#FFFFFF")
    else
        self.UI.show("TalonPanel")
    end
    befAft='_B'
end

function allignShip(P)
    if spectReturn(P) == true then
        return
    end
    rot = assignedShip.getRotation()
    modint,modfrac = math.modf(rot.y/45)
    if modfrac < 0.5 then
        rot.y = modint*45
    else
        rot.y = (modint+1)*45
    end
    assignedShip.setRotation(rot)
end

function placeShip(P)
    if spectReturn(P) == true then
        return
    end
    finished_setup = true
    assignedShip.setVar("finished_setup", true)
    assignedShip.setLock(true)
    faceStat = ""
end

setupRotations = {
    Rot1DegLBut = -1,
    Rot5DegLBut = -5,
    Rot225DegLBut = -22.5,
    Rot1DegRBut = 1,
    Rot5DegRBut = 5,
    Rot225DegRBut = 22.5,
}

function setupRot(P, option, id)
    if (option ~= '-1') or (spectReturn(P) == true) then
        return
    end
    local rot = assignedShip.getRotation()
    rot.y = rot.y + (setupRotations[id] or 0)
    assignedShip.setLock(true)
    assignedShip.setRotation(rot)
end

setupShifts = {
    AdjustFBut = vector(0,0,-0.05),
    AdjustBBut = vector(0,0,0.05),
    AdjustLBut = vector(0.05,0,0),
    AdjustRBut = vector(-0.05,0,0),
}

function setupShift(P, option, id)
    if (option ~= '-1') or (spectReturn(P) == true) then
        return
    end
    pos = assignedShip.positionToWorld(setupShifts[id] or vector(0,0,0))
    assignedShip.setLock(true)
    assignedShip.setPosition(pos)
end


function performMove(P)
    if spectReturn(P) == true then
        return
    end
    if setMan ~= nil and setMan ~="" then
        self.UI.setAttribute("MoveBtn", "active", "false")
        -- Check alternate execution options
        --print("curMan:" .. curMan)
        if exOptions[curMan] ~= nil and exOptSelected == false then
            setupAlternateExecutionPanel(P, exOptions[curMan])
        elseif setMan:sub(-1,-1) == 't' then
            if proxyMode then
                proxy_settings = {
                    ship_guid   = assignedShip.getGUID(),
                    move_code   = setMan,
                    offsets     = {front = 'ft', center = 't', back = 'bt'},
                    button_func = button.setProxyState,
                }
                proxy.spawn(proxy_settings)
                exOptSelected = false
                setDial(P)
            else
                self.UI.show("TalonPanel")
            end
        else
            self.UI.setAttribute("UndoBtn", "active", "true")
            self.UI.setAttribute("UndoBtn", "textColor", "#FFFFFF")
            assignedShip.setDescription(setMan)
            exOptSelected = false
            befAft = '_A'
            setDial(P)
        end
    end
end

function setupAlternateExecutionPanel(P, executionOptions)
    self.UI.setAttribute("TypeIcon", "active", "false")
    self.UI.setAttribute("SpeedIcon", "active", "false")
    self.UI.setAttribute("Templ", "active", "false")
    self.UI.setAttribute("undoFU", "active", "false")
    self.UI.show("ExecutionOptionsPanel")
    for i, button in pairs(exOptButtons) do
        self.UI.setAttribute(button .. 'But', "active", "false")
    end
    for i, option in pairs(executionOptions) do
        self.UI.setAttribute(exOptButtons[i] .. "But", "active", "true")
        exOptValue[exOptButtons[i] .. 'But'] = option
        local icons = getManouverIcons(option)
        self.UI.setAttribute(exOptButtons[i] .. "TypeIcon", "image", icons.type)
        self.UI.setAttribute(exOptButtons[i] .. "SpeedIcon", "image", icons.speed)
    end
end

function selectExecuteOption(P, option, id)
    if spectReturn(P) == true then
        return
    end
    self.UI.hide("ExecutionOptionsPanel")
    exOptSelected = true
    setMan = exOptValue[id]:sub(2)
    local icons = getManouverIcons(exOptValue[id])
    self.UI.setAttribute("TypeIcon", "active", "true")
    self.UI.setAttribute("SpeedIcon", "active", "true")
    self.UI.setAttribute("Templ", "active", "true")
    self.UI.setAttribute("Templ", "textColor", "#222222")
    self.UI.setAttribute("undoFU", "active", "true")
    self.UI.setAttribute("undoFU", "textColor", "#FFFFFF")
    self.UI.setAttribute("TypeIcon", "image", icons.type)
    self.UI.setAttribute("SpeedIcon", "image", icons.speed)
    performMove(P)

end


function performTalon(P,option,id)
    if spectReturn(P) == true then
        return
    end

    self.UI.hide("TalonPanel")
    self.UI.setAttribute("UndoBtn", "active", "true")
    self.UI.setAttribute("UndoBtn", "textColor", "#FFFFFF")
    if id=="TalonMidBtn" then
        assignedShip.setDescription(setMan)
    elseif id=="TalonReaBtn" then
        talonMove = setMan:sub(1,3).."b"..setMan:sub(-1,-1)
        assignedShip.setDescription(talonMove)
    elseif id=="TalonForBtn" then
        talonMove = setMan:sub(1,3).."f"..setMan:sub(-1,-1)
        assignedShip.setDescription(talonMove)
    end
    exOptSelected = false
    befAft ='_A'
    setDial(P)
end

function onPickUp(player_color)
    if assignedShip == nil then
        pColor = self.held_by_color
    end
end

-- Assign a ship to the dial
function assignShip(ship)
    self.UI.setAttribute("CenterFD", "active", "true")
    self.UI.setAttribute("CenterFU", "active", "true")
    self.UI.setAttribute("arcPanel", "active", "true")
    self.UI.setAttribute("tokenPanel", "active", "true")
    self.UI.setAttribute("proxyPanel", "active", "true")
    self.UI.hide("proxyPanel")
    self.UI.setAttribute("relocPanel", "active", "true")
    self.UI.setAttribute("setManPeekPanel", "active", "true")
    assignedShip = ship
    Name=assignedShip.getName()
    self.setName(Name)
    finished_setup = ship.getVar("finished_setup") or false
    --self.UI.setAttribute("DialName", Name)
    self.UI.setValue("Name",Name)
    self.UI.setValue("SetupName",Name)
    shipData=assignedShip.getTable("Data")
    exOptions = shipData.executeOptions or {}
    self.UI.setAttribute("BackGround", "image", tostring(shipData['Faction']).."BG")
    for k,v in pairs(shipData['moveSet']) do
        self.UI.setAttribute(string.upper(v), "active", "true")
    end
    setMan=""
    local repos = false
    for k,v in pairs(shipData['actSet']) do
        if v == 'F' then
            self.UI.setAttribute('FocusBtn', 'active', 'true')
        elseif v == 'TL' then
            self.UI.setAttribute("TargetLockBtn", 'active', 'true')
        elseif v == 'E' then
            self.UI.setAttribute("EvadeBtn", 'active', 'true')
        elseif v == 'R' then
            self.UI.setAttribute("ReinforceBtn", 'active', 'true')
        elseif v == 'C' then
            self.UI.setAttribute("CalculateBtn", 'active', 'true')
        elseif v == 'CL' then
            self.UI.setAttribute("CloakBtn", 'active', 'true')
        elseif v == 'BR' then
            repos = true
            button.setBarrelRollState(proxyMode, true)
        elseif v == 'B' then
            repos = true
            self.UI.setAttribute("BoostFD", "active", "true")
            self.UI.setAttribute("BoostSBtn", "active", "true")
            self.UI.setAttribute("BoostRBtn", "active", "true")
            self.UI.setAttribute("BoostLBtn", "active", "true")
        elseif v =='Ail' then
            repos = true
            self.UI.setAttribute("AileronFD", "active", "true")
            self.UI.setAttribute("AilSBtn", "active", "true")
            self.UI.setAttribute("AilRBtn", "active", "true")
            self.UI.setAttribute("AilLBtn", "active", "true")
        elseif v =='Piv' then
            repos = true
            self.UI.setAttribute("PivotFD", "active", "true")
            self.UI.setAttribute("PivKBtn", "active", "true")
            self.UI.setAttribute("PivRBtn", "active", "true")
            self.UI.setAttribute("PivLBtn", "active", "true")
        elseif v == 'Dare' then
            repos = true
            self.UI.setAttribute("BoostFD", "active", "true")
            self.UI.setAttribute("BoostFD", "preferredWidth", "330")
            self.UI.setAttribute("Boost2FD", "preferredWidth", "330")
            self.UI.setAttribute("BoostLTBtn", "active", "true")
            self.UI.setAttribute("BoostRTBtn", "active", "true")
            self.UI.setAttribute("BoostLT2Btn", "active", "true")
            self.UI.setAttribute("BoostRT2Btn", "active", "true")
        elseif v == '2B' then
            repos = true
            self.UI.setAttribute("Boost2FD", "active", "true")
            self.UI.setAttribute("BoostS2Btn", "active", "true")
            self.UI.setAttribute("BoostL2Btn", "active", "true")
            self.UI.setAttribute("BoostR2Btn", "active", "true")
        elseif v == '2BR' then
            repos = true
            self.UI.setAttribute("BarrelLeft2FD", "active", "true")
            self.UI.setAttribute("BarrelRight2FD", "active", "true")
            self.UI.setAttribute("BarrelR2Btn", "active", "true")
            self.UI.setAttribute("BarrelRF2Btn", "active", "true")
            self.UI.setAttribute("BarrelRB2Btn", "active", "true")
            self.UI.setAttribute("BarrelL2Btn", "active", "true")
            self.UI.setAttribute("BarrelLF2Btn", "active", "true")
            self.UI.setAttribute("BarrelLB2Btn", "active", "true")
        end
    end

    if repos == false then
        self.UI.setAttribute("RelocMenu", "active", "false")
        self.UI.setAttribute("RelocMenuFU", "active", "false")

    end

end


-- Assign on drop near a small base ship
function onDropped()
    if assignedShip == nil then
        local spos = self.getPosition()
        local nearest = nil
        local minDist = 2.89 -- 80mm
        for k,ship in pairs(getAllObjects()) do
            if ship.tag == 'Figurine' and ship.name ~= '' then
                local pos = ship.getPosition()
                local dist = math.sqrt(math.pow((spos[1]-pos[1]),2) + math.pow((spos[3]-pos[3]),2))
                if dist < minDist then
                    nearest = ship
                    minDist = dist
                end
            end
        end
        if nearest ~= nil then
            if pColor=="White" then
                printToAll("Please, pick a color before assigning dials")
            else
                assignedShip = nearest
                playerColor=pColor
                nearest.setVar('owningPlayer', pColor)
                printToAll('Dial assigned to to ' .. nearest.getName(), {0.2, 0.2, 1})
                printToAll('Controlled by the '.. playerColor .. ' player')
                printToAll('')
                self.setRotation(nearest.getRotation())
                assignShip(nearest)


            end
        end
    end
end

-- functions called when buttons are pressed
function genericAction(a,b,c,d)
    print(a)
    print(b)
    print(c)
    print(d)
end

function focusTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Focus', playerColor, {remove = id ~= '-1'} })
end

function evadeTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Evade', playerColor, {remove = id ~= '-1'} })
end

function tlTok(p, id)
    if spectReturn(p) == true then
        return
    end
    if id == '-1' then
        Global.call('proxyPerformAction', {assignedShip, 'Target Lock', playerColor})
    end
end

function tractorTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Tractor', playerColor, {remove = id ~= '-1'} })
end

function jamTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Jam', playerColor, {remove = id ~= '-1'} })
end

function disarmTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Disarm', playerColor, {remove = id ~= '-1'} })
end

function cloakTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Cloak', playerColor, {remove = id ~= '-1'} })
end

function calcTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Calculate', playerColor, {remove = id ~= '-1'} })
end

function reinforceTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Reinforce', playerColor, {remove = id ~= '-1'} })
end

function stressTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Stress', playerColor, {remove = id ~= '-1'} })
end

function strainTok(p,id)
  if spectReturn(p) == true then
      return
  end
  Global.call('proxyPerformAction', {assignedShip, 'Strain', playerColor, {remove = id ~= '-1'} })
end

function depleteTok(p,id)
  if spectReturn(p) == true then
      return
  end
  Global.call('proxyPerformAction', {assignedShip, 'Deplete', playerColor, {remove = id ~= '-1'} })
end

function ionTok(p,id)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Ion', playerColor, {remove = id ~= '-1'} })
end

reposCommands = {
    BoostSBtn = "s1b",
    BoostLBtn = "bl1b",
    BoostRBtn = "br1b",
    BoostLTBtn = "tl1b",
    BoostRTBtn = "tr1b",
    BoostS2Btn = "s2b",
    BoostL2Btn = "bl2b",
    BoostR2Btn = "br2b",
    BoostLT2Btn = "tl2b",
    BoostRT2Btn = "tr2b",
    AilLBtn = "bl1",
    AilSBtn = "s1",
    AilRBtn = "br1",
    BarrelLFBtn = "rl1",
    BarrelLBtn = "rl2",
    BarrelLBBtn = "rl3",
    BarrelRFBtn = "rr1",
    BarrelRBtn = "rr2",
    BarrelRBBtn = "rr3",

    BarrelLF2Btn = "cl1",
    BarrelL2Btn = "cl2",
    BarrelLB2Btn = "cl3",
    BarrelRF2Btn = "cr1",
    BarrelR2Btn = "cr2",
    BarrelRB2Btn = "cr3",

}

function Repos(P, option, id)
    if (option ~= '-1') or (spectReturn(P) == true) then
        return
    end

    local move_code = reposCommands[id] or ""
    if proxyMode and proxy.isProxyable(move_code) then
        proxy_settings = {
            ship_guid   = assignedShip.getGUID(),
            move_code   = move_code,
            offsets     = {front = '1', center = '2', back = '3'},
            cancellable = true,
            button_func = button.setProxyState,
        }

        proxy.spawn(proxy_settings)
    else
        assignedShip.setDescription(move_code)
    end
end

function CancelProxy(player, option, id)
    proxy.cancel(assignedShip.getGUID())
end

arcCommands = {
    Range1 = "r1",
    Range2 = "r2",
    Range3 = "r3",
    FrontArc = "f",
    LeftArc = "sl",
    RightArc = "sr",
    RearArc = "b",
    BullseyeArc = "bull",
    FullFrontArc = "ff",
    FullBackArc = "fb"
}

function Arc(P, option, id)
    if  spectReturn(P)then
        return
    end
    includeFriendlies = ""
    if (option ~= '-1') then
        includeFriendlies = "a"
    end
    assignedShip.setDescription((arcCommands[id] or "") .. includeFriendlies )
end


function pivK(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription('k0')
end

function pivR(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription('tr4')
end

function pivL(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription('tl4')
end

function Window(p)
    if winStat ==  nil then
        winStat = false
    end
    if spectReturn(p) == false then
        if winStat == false then
            winStat = true
            self.UI.show("ManWin")
            self.UI.setAttribute("ManWin", "visibility", playerColor .. "|Black")
            self.UI.setAttribute("ManBtnGroup", "active", "true")
        else
            winStat = false
            self.UI.setAttribute("ManBtnGroup", "active", "false")
            self.UI.hide('ManWin')
        end
    end
end

function spectReturn(p)
    if p.color == 'Black' then
      return false
    end
    return p.color ~= playerColor
end

function showSetMan(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("setManPeekPanel")
    self.UI.setAttribute("setManPeekPanel", "visibility", playerColor)
    self.UI.setAttribute("setManTypeIcon", "image", typeIcon)
    self.UI.setAttribute("setManSpeedIcon", "image", speedIcon)
    self.UI.setAttribute("setManTypeIcon", "active", "true")
    self.UI.setAttribute("setManSpeedIcon", "active", "true")
    self.UI.setAttribute("setManPeekPanel", "position", "-100 -150 -50")
    self.UI.setAttribute("setManPeekPanel", "rotation", "180 180 0")
end

function hideSetMan(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.hide("setManPeekPanel")
end

click_functions = {
    ArcMenu = {show= function() showArcMFD() end,
                hide= function() hideArcM() end },
    ArcMenuFU = {show= function() showArcMFU() end,
                hide= function() hideArcM() end },
    RelocMenu = {show= function() showRelocMFD() end,
                hide= function() hideRelocM() end },
    RelocMenuFU = {show= function() showRelocMFU() end,
                hide= function() hideRelocM() end },
    TokenMenu = {show= function() showTokMFD() end,
                hide= function() hideTokM() end },
    TokenMenuFU = {show= function() showTokMFU() end,
                hide= function() hideTokM() end },
}

hover_functions = {
    ArcMenu = function() showArcMFD() end,
    ArcMenuFU = function() showArcMFU() end,
    arcPanel = function() hideArcM() end,
    RelocMenu = function() showRelocMFD() end,
    RelocMenuFU = function() showRelocMFU() end,
    relocPanel = function() hideRelocM() end,
    TokenMenu = function() showTokMFD() end,
    TokenMenuFU = function() showTokMFU() end,
    tokenPanel = function() hideTokM() end,
}

function toggleClickMode(enable)
    clickMode = enable

    self.UI.setAttribute("arcPanel", "raycastTarget", not clickMode)
    self.UI.setAttribute("tokenPanel", "raycastTarget", not clickMode)
    self.UI.setAttribute("relocPanel", "raycastTarget", not clickMode)

    menu.update()
end

function toggleProxyMode(enable)
    proxyMode = enable

    button.setBarrelRollState(proxyMode)

    menu.update()
end

function menuClick(p, option, id)
    if not clickMode or spectReturn(p) == true then
        return
    end
    if openbutton == id then
        click_functions[id].hide(p)
    else
        click_functions[id].show(p)
    end
end

function menuHover(p, option, id)
    if clickMode or spectReturn(p) == true then
        return
    end
    hover_functions[id]()
end



function showTokMFD()
    self.UI.show("tokenPanel")
    self.UI.setAttribute("TokenMenu", "color", opencolor)
    clearOpenPanel()
    openpanel = "tokenPanel"
    openbutton = "TokenMenu"
    self.UI.setAttribute("tokenPanel", "position", "-360 -165 -25")
    self.UI.setAttribute("tokenPanel", "rotation", "180 180 0")
end

function showTokMFU()
    self.UI.show("tokenPanel")
    self.UI.setAttribute("TokenMenuFU", "color", opencolor)
    clearOpenPanel()
    openpanel = "tokenPanel"
    openbutton = "TokenMenuFU"
    self.UI.setAttribute("tokenPanel", "position", "360 -165 1")
    self.UI.setAttribute("tokenPanel", "rotation", "180 0 0")
end

function hideTokM()
    if openpanel == "tokenPanel" then
        self.UI.hide(openpanel)
        self.UI.setAttribute(openbutton, "color", closedcolor)
        self.UI.setAttribute(openbutton, "textColor", "#FFFFFF")
    end
    openpanel = nil
    openbutton = nil
end



function showArcMFD()
    self.UI.show("arcPanel")
    self.UI.setAttribute("ArcMenu", "color", opencolor)
    clearOpenPanel()
    openpanel = "arcPanel"
    openbutton = "ArcMenu"

    self.UI.setAttribute("arcPanel", "position", "250 -150 -25")
    self.UI.setAttribute("arcPanel", "rotation", "180 180 0")
end

function showArcMFU()
    self.UI.show("arcPanel")
    self.UI.setAttribute("ArcMenuFu", "color", opencolor)
    clearOpenPanel()
    openpanel = "arcPanel"
    openbutton = "ArcMenuFu"

    self.UI.setAttribute("arcPanel", "position", "-250 -150 1")
    self.UI.setAttribute("arcPanel", "rotation", "180 0 0")
end

function hideArcM()
    if openpanel == "arcPanel" then
        self.UI.hide(openpanel)
        self.UI.setAttribute(openbutton, "color", closedcolor)
        self.UI.setAttribute(openbutton, "textColor", "#FFFFFF")
    end
    openpanel = nil
    openbutton = nil
end

function showRelocMFD()
    self.UI.show("relocPanel")
    self.UI.setAttribute("RelocMenu", "color", opencolor)
    clearOpenPanel()
    openpanel = "relocPanel"
    openbutton = "RelocMenu"

    self.UI.setAttribute("relocPanel", "position", "0 -215 -25")
    self.UI.setAttribute("relocPanel", "rotation", "180 180 0")
end

function showRelocMFU()
    self.UI.show("relocPanel")
    self.UI.setAttribute("RelocMenuFu", "color", opencolor)
    clearOpenPanel()
    openpanel = "relocPanel"
    openbutton = "RelocMenuFu"

    self.UI.setAttribute("relocPanel", "position", "0 -215 1")
    self.UI.setAttribute("relocPanel", "rotation", "180 0 0")
end

function hideRelocM()
    if openpanel == "relocPanel" then
        self.UI.hide(openpanel)
        self.UI.setAttribute(openbutton, "color", closedcolor)
        self.UI.setAttribute(openbutton, "textColor", "#FFFFFF")
    end
    openpanel = nil
    openbutton = nil
end

function nextMan(P, opt, id)
    if spectReturn(P) == true then
        return
    end
    local dir = 1
    if id == "prevManBut" then
        dir = -1
    end
    for k,v in pairs(shipData.moveSet) do
        if v == curMan then
            local newman = k + dir
            if newman == 0 then
                newman = #shipData.moveSet
            elseif newman > #shipData.moveSet then
                newman = 1
            end
            manSelect(P,opt,shipData.moveSet[newman])
            self.UI.setAttribute(string.upper(curMan), "isOn", "true")
            return
        end
    end
    manSelect(P,opt,shipData.moveSet[1])
    self.UI.setAttribute(string.upper(curMan), "isOn", "true")
end

function setDial(P)
    if spectReturn(P) == false then
        if firstSet == true then
            if setStat == nil then
                setStat = false
            end

                if setStat == false then
                    self.UI.setAttribute("setBtnFD", "color", playerColor)
                    self.UI.setAttribute("setBtnFD", "active", "true")
                    self.UI.setAttribute("setBtnFD", "textColor", "#FFFFFF")
                    if (P.color == "Yellow") then
                       -- White text on yellow button is pretty hard to read, so for the Yellow player change the text to black instead
                      self.UI.setAttribute("setBtnFD", "textColor", "#000000")
                    end
                    self.UI.setAttribute("moveWindow", "active", "false")
                    setStat = true
                    setSinceTemplatePlaced = true
                    printToAll(P.color.." player has set the maneuver for "..assignedShip.getName(), P.color)
                    if winStat==true then
                        Window(P)
                    end

                else
                    --TODO: Now that the set dial and unset dial buttons are 2 different buttons, this file's code would probably be more readable with this function split in to setDial() and unsetDial()
                    self.UI.setAttribute("setBtnFD", "active", "false")
                    self.UI.setAttribute("setManPeekPanel", "active", "false")
                    self.UI.setAttribute("moveWindow", "active", "true")
                    self.UI.setAttribute("moveWindow", "textColor", "#FFFFFF")
                    setStat = false
                end
        else
            print("Pick a maneuver before setting the dial")
        end
    end
end

function spawnTemplate(p)
    if spectReturn(p) == true then
        return
    end
    if setMan~='' then
        setSinceTemplatePlaced = false
        templatePlaced = not templatePlaced

        -- if a manuver is not visible on dial, template button is only here to allow removal, and after that it can be hidden again
        if self.UI.getAttribute("SpeedIcon", "active") == "false" then
          self.UI.setAttribute("Templ", "active", "false")
        end

        Table={[1]=assignedShip,[2]='spawnMoveTemplate:'..setMan..befAft,[3]=playerColor}
        Global.call("proxyPerformAction",Table)
    end
end

function deleteTemplate()
  templatePlaced = false
  Table={[1]=assignedShip,[2]='deleteMoveTemplate',[3]=playerColor}
  Global.call("proxyPerformAction",Table)
end

