-- ~~~~~~
-- Script by dzikakulka
-- Issues, history at: http://github.com/tjakubo2/TTS_xwing
--
-- Token for easy barrel rolls with StarViper Mk.II title
-- ~~~~~~


-- Scripted token properties
__XW_Token = false
__XW_TokenIdle = true
__XW_TokenType = 'helper:Dial'

-- Ref to assigned ship if there is one
assignedShip = nil
currMan = nil
playerColor = nil

-- Save self state
function onSave()
    if assignedShip ~= nil then
        local state = {assignedShipGUID=assignedShip.getGUID(),
                        owningPlayer=playerColor}
        return JSON.encode(state)
    end
end

faceStat = nil
firstSet=false
setSinceTemplatePlaced = false -- True if the user has set a movement since the movement template was last placed on the table
templatePlaced = false  -- True if the movement template is currently on the table (as far as we can tell based on just dial button clicks, anyway)

-- Restore self state
function onLoad()
    --self.UI.setCustomAssets(assetTable)
    clearDial()
    if savedData ~= nil then
        state = JSON.decode(savedData)
        savedShip = getObjectFromGUID(state.assignedShipGUID)
        playerColor = state.owningPlayer
        if savedShip ~= nil then
            assignShip(savedShip)
        end
    end
end


function clearDial()

    self.UI.hide('TalonPanel') -- Talon has to come before CenterFU which it is inside -- hide doesn't work when the parent is already hidden (could also use active=false instead)
    self.UI.hide("CenterFD")
    self.UI.hide('CenterFU')
    self.UI.hide("ManWin")
    self.UI.hide('arcPanel')
    self.UI.hide('relocPanel')
    self.UI.hide('tokenPanel')
    self.UI.hide("setManPeekPanel")
    winStat = false
end

function onUpdate()
    if assignedShip ~= nil then
        if self.getTransformUp().y >0 then
            if faceStat ~= 'Down' then
                faceStat = 'Down'
                clearDial()
                self.UI.setAttribute("Main", "rotation", "0 0 0")
                self.UI.show("CenterFD")
            end
        else
            if faceStat ~= 'Up' then
                faceStat = 'Up'
                clearDial()
                manSetting()
                self.UI.setAttribute("Main", "rotation", "180 180 180")
                self.UI.show('CenterFU')
            end
        end
    end
end

function manSelect(p, option, id)
    if spectReturn(p) == true or option == false then
        return
    end
    firstSet=true
    self.UI.setAttribute("ManBtnGroup","allowSwitchOff","false")
    curMan=string.lower(id)
    if curMan:sub(1,1) == 'w' then
        manColor="White"
    elseif curMan:sub(1,1) == 'b' then
        manColor="Blue"
    elseif curMan:sub(1,1) == 'r' then
        manColor="Red"
    end

    if curMan:sub(-1,-1) == 't' then
        manType = "Talon"
    elseif curMan:sub(-1,-1) == 's' then
        manType = "Sloop"
    elseif curMan:sub(-1,-1) == 'r' then
        if curMan:sub(2,2) == 'b' then
            manType = "ReverseBank"
        else
            manType = "ReverseStraight"
        end
    elseif curMan:sub(2,2) == 't' then
        manType = "Turn"
    elseif curMan:sub(2,2) == 'b' then
        manType = "Bank"
    elseif curMan:sub(2,2) == 's' then
        manType = "Straight"
    elseif curMan:sub(2,2) == 'k' then
        manType = 'K'
    end

    local Char= curMan:find("%d")
    manSpeed = curMan:sub(Char,Char)

    if curMan:sub(3,3) == 'l' then
        manBear = "L"
    elseif curMan:sub(3,3) == 'r' then
        manBear = "R"
    else
        manBear = ""
    end
    if manSpeed=="0" and manType=="Straight" then
        manType='Stall'
    end
    speedIcon="Speed"..manSpeed
    typeIcon= manColor .. manType .. manBear
    setMan = curMan:sub(2)
    befAft = '_B'
end

function manSetting()
    if setStat == true then
        self.UI.setAttribute("TypeIcon", "image", typeIcon)
        self.UI.setAttribute("SpeedIcon", "image", speedIcon)
        self.UI.setAttribute("TypeIcon", "active", "true")
        self.UI.setAttribute("SpeedIcon", "active", "true")
        self.UI.setAttribute("MoveBtn", "active", "true")
        self.UI.setAttribute("MoveBtn", "textColor", "#FFFFFF")
        self.UI.setAttribute("UndoBtn", "active", "false")
        self.UI.setAttribute("Templ", "active", "true")
        self.UI.setAttribute("Templ", "textColor", "#222222") -- Make the text same color as the background since goal is to only have the type / speed icons showing anyway
    else
        self.UI.setAttribute("TypeIcon", "active", "false")
        self.UI.setAttribute("SpeedIcon", "active", "false")
        self.UI.setAttribute("MoveBtn", "active", "false")
        self.UI.setAttribute("UndoBtn", "active", "false")
        self.UI.setAttribute("Templ", "textColor", "#FFFFFF")

        -- Hide the template button when there isn't a manuver set, since it's confusing and undefined in some cases what template should be shown then
        if not templatePlaced then
          self.UI.setAttribute("Templ", "active", "false")
        end
    end
    if firstSet== false then
        self.UI.setAttribute("TypeIcon", "active", "false")
        self.UI.setAttribute("SpeedIcon", "active", "false")
        self.UI.setAttribute("MoveBtn", "active", "false")
        self.UI.setAttribute("UndoBtn", "active", "false")
        self.UI.setAttribute("Templ", "textColor", "#FFFFFF")

        -- Hide the template button when there isn't a manuver set, since it's confusing and undefined in some cases what template should be shown then
        if not templatePlaced then
          self.UI.setAttribute("Templ", "active", "false")
        end
    end

    -- Remove template if a new manuver has been set since it was shown, since it could be confusing to still show the old template (and to show the new one you would have to click the button twice, which would be confusing)
    if setSinceTemplatePlaced and templatePlaced then
      deleteTemplate()
    end
end

function Undo(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("q")
    self.UI.setAttribute("UndoBtn", "active", "false")
    if setMan:sub(-1,-1) ~='t' then
        self.UI.setAttribute("MoveBtn", "active", "true")
        self.UI.setAttribute("MoveBtn", "textColor", "#FFFFFF")
    else
        self.UI.show("TalonPanel")
    end
    befAft='_B'
end

function performMove(P)
    if spectReturn(P) == true then
        return
    end
    if setMan~="" then
        self.UI.setAttribute("MoveBtn", "active", "false")
        if setMan:sub(-1,-1) ~='t' then
            self.UI.setAttribute("UndoBtn", "active", "true")
            self.UI.setAttribute("UndoBtn", "textColor", "#FFFFFF")
            assignedShip.setDescription(setMan)
            befAft = '_A'
            setDial(P)
        else
            self.UI.show("TalonPanel")
        end
    end
end


function performTalon(P,option,id)
    if spectReturn(P) == true then
        return
    end

    self.UI.hide("TalonPanel")
    self.UI.setAttribute("UndoBtn", "active", "true")
    self.UI.setAttribute("UndoBtn", "textColor", "#FFFFFF")
    if id=="TalonMidBtn" then
        assignedShip.setDescription(setMan)
    elseif id=="TalonReaBtn" then
        talonMove = setMan:sub(1,3).."b"..setMan:sub(-1,-1)
        assignedShip.setDescription(talonMove)
    elseif id=="TalonForBtn" then
        talonMove = setMan:sub(1,3).."f"..setMan:sub(-1,-1)
        assignedShip.setDescription(talonMove)
    end
    befAft ='_A'
    setDial(P)
end

function onPickUp(player_color)
    if assignedShip == nil then
        pColor = self.held_by_color
    end
end

-- Assign a ship to the dial
function assignShip(ship)
    self.UI.setAttribute("CenterFD", "active", "true")
    self.UI.setAttribute("CenterFU", "active", "true")
    self.UI.setAttribute("arcPanel", "active", "true")
    self.UI.setAttribute("tokenPanel", "active", "true")
    self.UI.setAttribute("relocPanel", "active", "true")
    self.UI.setAttribute("CenterFD", "active", "true")
    self.UI.setAttribute("setManPeekPanel", "active", "true")
    assignedShip = ship
    Name=assignedShip.getName()
    self.setName(Name)
    --self.UI.setAttribute("DialName", Name)
    self.UI.setValue("Name",Name)
    shipData=assignedShip.getTable("Data")
    self.UI.setAttribute("BackGround", "image", tostring(shipData['Faction']).."BG")
    for k,v in pairs(shipData['moveSet']) do
        self.UI.setAttribute(string.upper(v), "active", "true")
    end
    setMan=""
    local repos = false
    for k,v in pairs(shipData['actSet']) do
        if v == 'F' then
            self.UI.setAttribute('FocusBtn', 'active', 'true')
        elseif v == 'TL' then
            self.UI.setAttribute("TargetLockBtn", 'active', 'true')
        elseif v == 'E' then
            self.UI.setAttribute("EvadeBtn", 'active', 'true')
        elseif v == 'R' then
            self.UI.setAttribute("ReinforceBtn", 'active', 'true')
        elseif v == 'C' then
            self.UI.setAttribute("CalculateBtn", 'active', 'true')
        elseif v == 'CL' then
            self.UI.setAttribute("CloakBtn", 'active', 'true')
        elseif v == 'BR' then
            repos = true
            self.UI.setAttribute("BarrelRBtn", "active", "true")
            self.UI.setAttribute("BarrelRFBtn", "active", "true")
            self.UI.setAttribute("BarrelRBBtn", "active", "true")
            self.UI.setAttribute("BarrelLBtn", "active", "true")
            self.UI.setAttribute("BarrelLFBtn", "active", "true")
            self.UI.setAttribute("BarrelLBBtn", "active", "true")
        elseif v == 'B' then
            repos = true
            self.UI.setAttribute("BoostSBtn", "active", "true")
            self.UI.setAttribute("BoostRBtn", "active", "true")
            self.UI.setAttribute("BoostLBtn", "active", "true")
        elseif v =='Ail' then
            repos = true
            self.UI.setAttribute("AilSBtn", "active", "true")
            self.UI.setAttribute("AilRBtn", "active", "true")
            self.UI.setAttribute("AilLBtn", "active", "true")
        elseif v =='Piv' then
            repos = true
            self.UI.setAttribute("PivKBtn", "active", "true")
            self.UI.setAttribute("PivRBtn", "active", "true")
            self.UI.setAttribute("PivLBtn", "active", "true")
        end
    end

    if repos == false then
        self.UI.setAttribute("RelocMenu", "active", "false")
        self.UI.setAttribute("RelocMenuFU", "active", "false")

    end

end


-- Assign on drop near a small base ship
function onDropped()
    if assignedShip == nil then
        local spos = self.getPosition()
        local nearest = nil
        local minDist = 2.89 -- 80mm
        for k,ship in pairs(getAllObjects()) do
            if ship.tag == 'Figurine' and ship.name ~= '' then
                local pos = ship.getPosition()
                local dist = math.sqrt(math.pow((spos[1]-pos[1]),2) + math.pow((spos[3]-pos[3]),2))
                if dist < minDist then
                    nearest = ship
                    minDist = dist
                end
            end
        end
        if nearest ~= nil then
            if pColor=="White" then
                printToAll("Please, pick a color before assigning dials")
            else
                assignedShip = nearest
                playerColor=pColor
                nearest.setVar('owningPlayer', pColor)
                printToAll('Dial assigned to to ' .. nearest.getName(), {0.2, 0.2, 1})
                printToAll('Controlled by the '.. playerColor .. ' player')
                printToAll('')
                self.setRotation(nearest.getRotation())
                assignShip(nearest)

            end
        end
    end
end

-- functions called when buttons are pressed
function genericAction(a,b,c,d)
    print(a)
    print(b)
    print(c)
    print(d)
end

function focusTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Focus', playerColor})
end

function evadeTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Evade', playerColor})
end

function tlTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Target Lock', playerColor})
end

function tractorTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Tractor', playerColor})
end

function jamTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Jam', playerColor})
end

function disarmTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Disarm', playerColor})
end

function cloakTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Cloak', playerColor})
end

function calcTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Calculate', playerColor})
end

function reinforceTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Reinforce', playerColor})
end

function stressTok(p,id)
    if spectReturn(p) == true then
        return
    end
    if id == '-1' then
        Global.call('proxyPerformAction', {assignedShip, 'Stress', playerColor})
    else
        Global.call('proxyPerformAction', {assignedShip, 'unstress', playerColor})
    end
end

function strainTok(p,id)
  if spectReturn(p) == true then
      return
  end
  if id == '-1' then
      Global.call('proxyPerformAction', {assignedShip, 'Strain', playerColor})
  else
      Global.call('proxyPerformAction', {assignedShip, 'unstrain', playerColor})
  end
end

function ionTok(p)
    if spectReturn(p) == true then
        return
    end
    Global.call('proxyPerformAction', {assignedShip, 'Ion', playerColor})
end

function BoostS(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("s1b")
end

function BoostR(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("br1b")
end

function BoostL(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("bl1b")
end


function AilS(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("s1")
end

function AilR(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("br1")
end

function AilL(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("bl1")
end

function BarrelL(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("rl2")
end

function BarrelLF(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("rl1")
end

function BarrelLB(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("rl3")
end

function BarrelR(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("rr2")
end

function BarrelRF(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("rr1")
end

function BarrelRB(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("rr3")
end

function range1(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("r1")
end

function range2(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("r2")
end

function range3(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("r3")
end

function arcF(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("f")
end

function arcFF(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("ff")
end

function arcL(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("sl")
end

function arcR(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("sr")
end

function arcB(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("b")
end

function arcFB(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription("fb")
end

function pivK(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription('k0')
end

function pivR(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription('tr4')
end

function pivL(p)
    if spectReturn(p) == true then
        return
    end
    assignedShip.setDescription('tl4')
end

function Window(p)
    if winStat ==  nil then
        winStat = false
    end
    if spectReturn(p) == false then
        if winStat == false then
            winStat = true
            self.UI.show("ManWin")
            self.UI.setAttribute("ManWin", "visibility", playerColor .. "|Black")
            self.UI.setAttribute("ManBtnGroup", "active", "true")
        else
            winStat = false
            self.UI.setAttribute("ManBtnGroup", "active", "false")
            self.UI.hide('ManWin')
        end
    end
end

function spectReturn(p)
    if p.color == 'Black' then
      return false
    end
    return p.color ~= playerColor
end

function showSetMan(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("setManPeekPanel")
    self.UI.setAttribute("setManPeekPanel", "visibility", playerColor)
    self.UI.setAttribute("setManTypeIcon", "image", typeIcon)
    self.UI.setAttribute("setManSpeedIcon", "image", speedIcon)
    self.UI.setAttribute("setManTypeIcon", "active", "true")
    self.UI.setAttribute("setManSpeedIcon", "active", "true")
    self.UI.setAttribute("setManPeekPanel", "position", "-100 -150 -50")
    self.UI.setAttribute("setManPeekPanel", "rotation", "180 180 0")
end

function hideSetMan(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.hide("setManPeekPanel")
end


function showTokMFD(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("tokenPanel")
    self.UI.hide("arcPanel")
    self.UI.hide("relocPanel")
    self.UI.setAttribute("tokenPanel", "position", "-340 -165 -40")
    self.UI.setAttribute("tokenPanel", "rotation", "180 180 0")
end

function showTokMFU(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("tokenPanel")
    self.UI.hide("arcPanel")
    self.UI.hide("relocPanel")
    self.UI.setAttribute("tokenPanel", "position", "340 -165 40")
    self.UI.setAttribute("tokenPanel", "rotation", "180 0 0")
end

function hideTokM(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.hide("tokenPanel")
end


function showArcMFD(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("arcPanel")
    self.UI.hide("relocPanel")
    self.UI.hide("tokenPanel")
    self.UI.setAttribute("arcPanel", "position", "260 -185 -40")
    self.UI.setAttribute("arcPanel", "rotation", "180 180 0")
end

function showArcMFU(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("arcPanel")
    self.UI.hide("relocPanel")
    self.UI.hide("tokenPanel")
    self.UI.setAttribute("arcPanel", "position", "-260 -185 40")
    self.UI.setAttribute("arcPanel", "rotation", "180 0 0")
end

function hideArcM(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.hide("arcPanel")
end

function showRelocMFD(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("relocPanel")
    self.UI.hide("arcPanel")
    self.UI.hide("tokenPanel")
    self.UI.setAttribute("relocPanel", "position", "0 -215 -40")
    self.UI.setAttribute("relocPanel", "rotation", "180 180 0")
end

function showRelocMFU(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.show("relocPanel")
    self.UI.hide("arcPanel")
    self.UI.hide("tokenPanel")
    self.UI.setAttribute("relocPanel", "position", "0 -215 40")
    self.UI.setAttribute("relocPanel", "rotation", "180 0 0")
end

function hideRelocM(p)
    if spectReturn(p) == true then
        return
    end
    self.UI.hide("relocPanel")
end

function setDial(P)
    if spectReturn(P) == false then
        if firstSet == true then
            if setStat == nil then
                setStat = false
            end

                if setStat == false then
                    self.UI.setAttribute("setBtnFD", "color", playerColor)
                    self.UI.setAttribute("setBtnFD", "active", "true")
                    self.UI.setAttribute("setBtnFD", "textColor", "#FFFFFF")
                    if (P.color == "Yellow") then
                       -- White text on yellow button is pretty hard to read, so for the Yellow player change the text to black instead
                      self.UI.setAttribute("setBtnFD", "textColor", "#000000")
                    end
                    self.UI.setAttribute("moveWindow", "active", "false")
                    setStat = true
                    setSinceTemplatePlaced = true
                    printToAll(P.color.." player has set the maneuver for "..assignedShip.getName(), P.color)
                    if winStat==true then
                        Window(P)
                    end

                else
                    --TODO: Now that the set dial and unset dial buttons are 2 different buttons, this file's code would probably be more readable with this function split in to setDial() and unsetDial()
                    self.UI.setAttribute("setBtnFD", "active", "false")
                    self.UI.setAttribute("moveWindow", "active", "true")
                    self.UI.setAttribute("moveWindow", "textColor", "#FFFFFF")
                    setStat = false
                end
        else
            print("Pick a maneuver before setting the dial")
        end
    end
end

function spawnTemplate(p)
    if spectReturn(p) == true then
        return
    end
    if setMan~='' then
        setSinceTemplatePlaced = false
        templatePlaced = not templatePlaced

        -- if a manuver is not visible on dial, template button is only here to allow removal, and after that it can be hidden again
        if self.UI.getAttribute("SpeedIcon", "active") == "false" then
          self.UI.setAttribute("Templ", "active", "false")
        end

        Table={[1]=assignedShip,[2]='spawnMoveTemplate:'..setMan..befAft,[3]=playerColor}
        Global.call("proxyPerformAction",Table)
    end
end

function deleteTemplate()
  templatePlaced = false
  Table={[1]=assignedShip,[2]='deleteMoveTemplate',[3]=playerColor}
  Global.call("proxyPerformAction",Table)
end
