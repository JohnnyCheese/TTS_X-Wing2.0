#include TTS_xwing/src/Dimensions
selectedShip = nil
-- Assign on drop near a small base ship
function onDropped(color)
    local spos = self.getPosition()
    local nearest = nil
    local minDist = 2.89 -- 80mm
    for k,ship in pairs(getObjectsWithTag('Ship')) do
        local pos = ship.getPosition()
        local dist = math.sqrt(math.pow((spos[1]-pos[1]),2) + math.pow((spos[3]-pos[3]),2))
        if dist < minDist then
            nearest = ship
            minDist = dist
        end
    end
    if nearest ~= nil then
        printToAll('Electo-Chaff Missiles preparing to launch')
        initialP = self.getPosition()
        selectedShip = nearest
        local pos = selectedShip.getPosition() - selectedShip.getTransformForward()*2
        local rot = selectedShip.getRotation() + vector(0, -90, 0)
        doMove(pos,rot)
        launch()
    end
end

function launch()
    self.lock()
    self.createButton({
      click_function = "dropBR",
      function_owner = self,
      label          = "^",
      position       = {-1.2,0.3,1 },
      rotation       = {0,135,0},
      width          = 300,
      height         = 300,
      font_size      = 250
    })
    self.createButton({
      click_function = "dropS",
      function_owner = self,
      label          = "^",
      position       = {-1,0.3,0 },
      rotation       = {0,90,0},
      width          = 300,
      height         = 300,
      font_size      = 250
    })
    self.createButton({
      click_function = "dropBL",
      function_owner = self,
      label          = "^",
      position       = {-1.2,0.3,-1 },
      rotation       = {0,45,0},
      width          = 300,
      height         = 300,
      font_size      = 250
    })
    self.createButton({
      click_function = "cancel",
      function_owner = self,
      label          = "Cancel",
      position       = {-2.5,0.3,0},
      rotation       = {0,90,0},
      width          = 800,
      height         = 300,
      font_size      = 250
    })
end

function cancel()
    self.unlock()
    self.clearButtons()
    doMove(initialP, self.getRotation())
end


function dropBL()
    --print("BL")
    self.clearButtons()
<<<<<<< Updated upstream
    pos = selectedShip.getPosition() - selectedShip.getTransformForward()*6 + selectedShip.getTransformRight()*4
    doMove(pos,self.getRotation() + vector(0,-45,0))
=======
    pos = selectedShip.getPosition() + vector(0,-0.1,0) - selectedShip.getTransformForward()*6.19 + selectedShip.getTransformRight()*2.79
    doMove(pos,self.getRotation() + vector(0,-45,0))
    takeFuse(pos)
>>>>>>> Stashed changes
end

function dropS()
    --print("S")
    self.clearButtons()
<<<<<<< Updated upstream
    pos = selectedShip.getPosition() - selectedShip.getTransformForward()*7.2
    doMove(pos,self.getRotation())
=======
    pos = selectedShip.getPosition() + vector(0,-0.1,0) - selectedShip.getTransformForward()*7.71
    doMove(pos,self.getRotation())
    takeFuse(pos)
>>>>>>> Stashed changes
end

function dropBR()
    --print("BR")
    self.clearButtons()
<<<<<<< Updated upstream
    pos = selectedShip.getPosition() - selectedShip.getTransformForward()*8 - selectedShip.getTransformRight()*4
    doMove(pos,self.getRotation() + vector(0,45,0))
=======
    pos = selectedShip.getPosition() + vector(0,-0.1,0) - selectedShip.getTransformForward()*6.19 - selectedShip.getTransformRight()*2.79
    doMove(pos,self.getRotation() + vector(0,45,0))
    takeFuse(pos)
end

function takeFuse(pos)
    fuseBag = getObjectFromGUID('568727')
    fuseBag.takeObject({
      position          = pos + vector(0, 1, 0),
      smooth            = true,
    })
>>>>>>> Stashed changes
end

function doMove(pos,rot)
    Global.call("API_ClearPosition", {pos = pos, reach = 0.8})
    self.setPositionSmooth(pos, false, true)
    self.setRotationSmooth(rot, false, true)
end
