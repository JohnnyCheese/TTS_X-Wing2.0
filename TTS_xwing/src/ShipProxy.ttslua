-- ~~~~~~
-- Script by Eirik 'Flippster' Munthe
-- Issues, history at: https://github.com/JohnnyCheese/TTS_X-Wing2.0
--
-- Module for handeling ship proxies, used in barrel rolls and more
-- ~~~~~~
ShipProxyModule = {}
ShipProxyModule.proxyTable = {}
ShipProxyModule.hiddenShips = {}
ShipProxyModule.finalPosOffset = {
    small = vector(0, 0, Convert_mm_igu(10)),
    medium = vector(0, 0, Convert_mm_igu(20)),
    large = vector(0, 0, Convert_mm_igu(20))
}

ShipProxyModule.barrelRollOffset = {}
ShipProxyModule.barrelRollOffset = {
    small = vector(Convert_mm_igu(80), 0, 0),
    medium = vector(Convert_mm_igu(80), 0, 0),
    large = vector(Convert_mm_igu(100), 0, 0)
}

ShipProxyModule.proxyXmlGui = {}
ShipProxyModule.proxyXmlGui.markShip = [[
<Defaults>
    <Button class="InvisibleButton" color="#22222255" outline="#BBBBBB" outlineSize="2 2" fontSize="22" textColor="#FFFFFF" fontStyle="Bold"/>
</Defaults>
<Panel id="Center"
    width="200"
    height="200"
    position="0 0 -20"
    rotation="0 0 180"
    color="#aaffaa00"
    onMouseExit="hideBtn"
    active="false">

    <Button id="Select" class="InvisibleButton" offsetXY="0 0" width="225" height="225" active="true" onClick="select">
    </Button>
</Panel>

]]
ShipProxyModule.proxyXmlGui.finalPos = [[
<Defaults>
    <Button class="InvisibleButton" color="#22222255" outline="#BBBBBB" outlineSize="2 2" fontSize="22" textColor="#FFFFFF" fontStyle="Bold"/>
</Defaults>
<Panel id="Center"
    width="200"
    height="200"
    position="0 0 -20"
    rotation="0 0 180"
    color="#aaffaa00"
    onMouseExit="hideBtn"
    active="false">

    <Button id="Select" class="InvisibleButton" offsetXY="0 0" width="225" height="225" active="true" onClick="select">
    </Button>
</Panel>

]]


ShipProxyModule.proxyScripts = {}
ShipProxyModule.proxyScripts.markShip = [[

sizeScale = {
    small = {width = 1, height = 1},
    medium = {width = 1.5, height = 1.5},
    large = {width = 2.0, height = 2.0},
    huge = {width = 2.0, height = 5}
}

function onLoad(save_state)
    self.AddContextMenuItem("Return ship", function() Global.call("UnMarkShip", {shipGUID = self.getVar("shipGUID"), proxy = self})
end, false)
end

function onContextOpen(player)
    self.UI.setAttribute("Select", "width", tostring(225 * sizeScale[self.getVar("size")].width))
    self.UI.setAttribute("Select", "height", tostring(225 * sizeScale[self.getVar("size")].height))
    self.UI.show("Center")
end

function select(player)
    Global.call("UnMarkShip", {shipGUID = self.getVar("shipGUID"), proxy = self})
end
]]

ShipProxyModule.proxyScripts.finalPos = [[

sizeScale = {
    small = {width = 1, height = 1},
    medium = {width = 1.5, height = 1.5},
    large = {width = 2.0, height = 2.0},
    huge = {width = 2.0, height = 5}
}

function onLoad(save_state)

end

function onHoverEnter(player)
    self.UI.setAttribute("Select", "width", tostring(225 * sizeScale[self.getVar("size")].width))
    self.UI.setAttribute("Select", "height", tostring(225 * sizeScale[self.getVar("size")].height))
    self.UI.show("Center")
    self.setColorTint(hoverColor)
end

function onHoverLeave(player)
    self.UI.hide("Center")
    self.setColorTint(defaultColor)
end

function select(player)
    Global.call("SelectFinalPos", {shipGUID = shipGUID, proxy = self, move_code = move_code})
end
]]

function MarkShip(args)
    local finpos = { pos = args.ship.getPosition(), rot = args.ship.getRotation() }
    ShipProxyModule.spawnProxy(args.ship, true, finpos, false, "markShip")
end

function UnMarkShip(args)
    local pos = ShipProxyModule.hiddenShips[args.shipGUID]
    local ship = getObjectFromGUID(args.shipGUID)
    if pos ~= nil and ship ~= nil then
        ship.setPosition(pos)
        ship.interactable = true
        ShipProxyModule.hiddenShips[args.shipGUID] = nil
    end
    for k, proxy in pairs( ShipProxyModule.proxyTable[args.shipGUID]) do
        if proxy ~= nil then
            proxy.destruct()
        end
    end
     ShipProxyModule.proxyTable[args.shipGUID] = nil;
end

function StartBarrelRoll(args)
    local ship = args.ship
    local direction = args.direction
    local code = ''
    if direction == "right" then
        code = 'rr'
    elseif direction == "left" then
        code = 'rl'
    end
    local offsets = { code .. '1', code .. '2', code .. '3' }

    local collide = true
    for i, v in ipairs(offsets) do
        local result = ShipProxyModule.CreateMoveProxy(v, ship)
        if result ~= 'overlap' then
            collide = false
        end
    end

    if collide then
        local info = MoveData.DecodeInfo(code, ship)
        local annInfo = {type='overlap', note=info.collNote, code=info.code}
        AnnModule.Announce(annInfo, 'all', ship)
    end
end

ShipProxyModule.CreateMoveProxy = function(move_code, ship)
    local info = MoveData.DecodeInfo(move_code, ship)
    local finalPos = MoveModule.GetFinalPosData(move_code, ship)

    if finalPos.finType == 'overlap' then
        return finalPos.finType
    end

    local templateData = {
        origin = ship.getPosition(),
        orientation = ship.getRotation(),
        dir = info.dir,
        speed = info.speed,
        type = info.type,
        shipSize = info.size,
        extra = info.extra
    }

    local collisions = MoveModule.CheckMineAndObstacleCollisions(ship, finalPos.finPos, false, templateData)

    local didCollide = false
    if collisions[1] ~= nil then
        didCollide = true
    end

    ShipProxyModule.spawnProxy(ship, false, finalPos.finPos, didCollide, "finalPos", move_code)
    return finalPos.finType
end

function SelectFinalPos(args)
    local ship = getObjectFromGUID(args.shipGUID)
    local move_code = args.move_code
    MoveModule.PerformMove(move_code, ship)

    for k, proxy in pairs( ShipProxyModule.proxyTable[args.shipGUID]) do
        if proxy ~= nil then
            proxy.destruct()
        end
    end
end

ShipProxyModule.StartFinalPositionSelection = function(ship, positionOffset)
    local size = ship.getTable('Data').Size or "small"
    local offset = ShipProxyModule.finalPosOffset[size]
    for k, off in pairs({offset, vector(0,0,0), vector(0,0,0)-offset}) do
        ShipProxyModule.spawnProxy(ship, false, positionOffset + off, color(0,0.1,1,0.2), "finalPos")
    end
end

ShipProxyModule.proxyModels = {
    collider = {
        small = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/colliders/Small_base_proxy_collider.obj',
        medium = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/colliders/Medium_base_proxy_collider.obj',
        large = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/colliders/Large_base_proxy_collider.obj',
        huge = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/colliders/Huge_base_proxy_collider.obj'
    },
    model = {
        small = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/ships/proxy/small.obj',
        medium = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/ships/proxy/medium.obj',
        large = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/ships/proxy/large.obj',
        huge = '{verifycache}https://github.com/JohnnyCheese/TTS_X-Wing2.0/raw/master/assets/ships/proxy/huge.obj',
    },
}

ShipProxyModule.spawnProxy = function(ship, hide, finpos, didCollide, script, move_code)
    if hide and ShipProxyModule.hiddenShips[ship.getGUID()] ~= nil then
        return
    end

    local proxy = spawnObject({
      type              = "Custom_Model",
      position          = finpos.pos,
      rotation          = finpos.rot,
      scale             = ship.getScale(),
      sound             = false,
      snap_to_grid      = false,
    })
    local size = ship.getTable("Data").Size or 'small'
    proxy.setCustomObject({
        type = 0,
        material = 3,
        collider = ShipProxyModule.proxyModels.collider[size],
        mesh = ShipProxyModule.proxyModels.model[size],
    })

    local defaultColor = {}
    local hoverColor = {}
    if didCollide then
        defaultColor = color(1.0, 0.3, 0.3, 0.1)
        hoverColor = color(1.0, 1.0, 0.5, 0.5)
    else
       defaultColor = color(0.3, 0.3, 1.0, 0.1)
       hoverColor = color(0.5,1.0,0.5,0.5)
    end
    proxy.setColorTint(defaultColor)
    proxy.setTable("defaultColor", defaultColor)
    proxy.setTable("hoverColor", hoverColor)

    proxy.setLock(true)
    proxy.setLuaScript(ShipProxyModule.proxyScripts[script])
    proxy.UI.setXml(ShipProxyModule.proxyXmlGui[script])
    proxy.setVar("shipGUID", ship.getGUID())
    proxy.setVar("size", size)
    proxy.setVar("move_code", move_code)

    if hide then
        ShipProxyModule.hiddenShips[ship.getGUID()] = ship.getPosition()
        ship.setPosition(vector(0, -3, 0))
        ship.interactable = false
        ship.setLock(true)
        local playerColors = ship.getSelectingPlayers()
        for _, player in ipairs(playerColors) do
            ship.removeFromPlayerSelection(player)
        end
    end

    ShipProxyModule.proxyTable[ship.getGUID()] = ShipProxyModule.proxyTable[ship.getGUID()] or {}
    table.insert(ShipProxyModule.proxyTable[ship.getGUID()], proxy)
end
